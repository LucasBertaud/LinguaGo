// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String            @id @default(uuid())
  pseudo              String
  email               String            @unique
  password            String
  role                Role              @default(USER)
  createdAt           DateTime          @default(now())
  firstTimeConnection Boolean           @default(false)
  refreshTokens       RefreshToken[]
  completedExercises  UserCompletedExercise[]
  favoriteSeries      UserFavoriteSerie[]
  completedSeries     UserCompletedExercisesSerie[]
  stats               UserStats?
  avatarId            Int?
  avatar              Avatar?           @relation(fields: [avatarId], references: [id])
}

model Avatar {
  id        Int      @id @default(autoincrement())
  svg       String
  users     User[]
}

model SiteStats{
  id                    Int       @id @default(1)
  totalUsers            Int       @default(0)
  totalExercises        Int       @default(0)
  totalSeries           Int       @default(0)
  totalPoints           Int       @default(0)
}

model UserStats {
  id                    Int       @default(autoincrement()) @id
  userId                String    @unique
  user                  User      @relation(fields: [userId], references: [id])
  points                Int       @default(0)
  successfullExercises  Int       @default(0)
  failedExercises       Int       @default(0)
  completedSeries       Int       @default(0)
  timeSpentOnExercises  Int       @default(0)
  level                 LevelEnum @default(A1)
}

model RefreshToken {
  id        String    @id @default(uuid())
  token     String
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  expiresAt DateTime
}

model Level {  
  id              Int               @default(autoincrement()) @id
  title           LevelEnum         @unique
  subtitle        String
  description     String?
  pointsPerExo    Int               @default(1)
  winablePoints   Int               @default(0)
  exercisesSeries ExercisesSerie[]
}

model ExercisesSerie {
  id            Int         @default(autoincrement()) @id
  title         String
  description   String?
  exercises     Exercise[]
  createdAt     DateTime    @default(now())
  level         Level       @relation(fields: [levelId], references: [id])
  levelId       Int
  favoriteUsers UserFavoriteSerie[]
  completedUsers UserCompletedExercisesSerie[]
}

model Exercise {
  id              Int               @default(autoincrement()) @id
  question        String
  answer          String
  choices         String[]
  type            ExerciseType
  serie           ExercisesSerie    @relation(fields: [serieId], references: [id]) 
  serieId         Int
  usersCompleted  UserCompletedExercise[]
}

model UserCompletedExercise {
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  exercise    Exercise  @relation(fields: [exerciseId], references: [id])
  exerciseId  Int
  completedAt DateTime  @default(now())
  serieId     Int
  pointsWon   Int       @default(1)

  @@id(name: "idUserCompletedExercise", [userId, exerciseId])
}

model UserFavoriteSerie {
  user        User            @relation(fields: [userId], references: [id])
  userId      String
  serie       ExercisesSerie  @relation(fields: [serieId], references: [id])
  serieId     Int
  createdAt   DateTime        @default(now())

  @@id(name: "idUserFavoriteSerie", [userId, serieId])
}

model UserCompletedExercisesSerie {
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  serieId Int
  exercisesSerie ExercisesSerie @relation(fields: [serieId], references: [id])
  completedAt DateTime  @default(now())

  @@id(name: "idUserCompletedExercisesSerie", [userId, serieId])
}

enum Role {
  USER
  ADMIN
}

enum LevelEnum {
  A1
  A2
  B1
  B2
  C1
}

enum ExerciseType {
  MULTIPLE_CHOICE
  TRANSLATION
  TRUE_FALSE
}